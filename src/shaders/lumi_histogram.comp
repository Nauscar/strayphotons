#version 430

##import lib/util
##import lib/lighting_util

layout (binding = 0) uniform sampler2D lumiTex;
layout (binding = 0, r32ui) uniform uimage2D finalHistogram;

layout (local_size_x = 16, local_size_y = 16) in;

#define HistogramBins 64
shared uint Histogram[HistogramBins];

const float lumMin = 0, lumMax = 1;

uint pixelBin(vec3 c) {
	float lum = DigitalLuminance(c);
	float ratio = saturate((lum - lumMin) / (lumMax - lumMin));
	return uint(float(HistogramBins - 1) * ratio);
}

void main() {
	vec2 ts = textureSize(lumiTex, 0);
	vec2 texCoord = (vec2(gl_GlobalInvocationID.xy) + 0.5) / ts;

	if (gl_LocalInvocationIndex == 0) {
		// Initialize shared mem in first thread.
		for (int i = 0; i < HistogramBins; i++) {
			Histogram[i] = 0;
		}
	}

	barrier();

	if (texCoord.x < 1.0 && texCoord.y < 1.0) {
		vec3 c = texture(lumiTex, texCoord).rgb;
		uint bin = pixelBin(c);
		atomicAdd(Histogram[bin], 1);
	}

	barrier();

	if (gl_LocalInvocationIndex == 0) {
		// Persist shared mem to global buffer in first thread.
		for (int i = 0; i < HistogramBins; i++) {
			imageAtomicAdd(finalHistogram, ivec2(i, 0), Histogram[i]);
		}
	}
}