#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0) uniform atomic_uint fragListSize;

layout (binding = 0, r32ui) readonly uniform uimage2D voxelFragList;
layout (binding = 1, r32ui) uniform uimage3D voxelPackedData;
layout (binding = 2, rgba16) writeonly uniform image3D voxelRadiance;
layout (binding = 3, rgba8) writeonly uniform image3D voxelNormal;

##import lib/util
##import voxel_shared

void main()
{
	uint index = gl_WorkGroupID.x * (gl_WorkGroupSize.x * gl_WorkGroupSize.y) + gl_LocalInvocationIndex;
	uint size = atomicCounter(fragListSize);
	if (index >= size) return;

	uint packedPosition = imageLoad(voxelFragList, ivec2(index & MaxFragListMask[0], index >> FragListWidthBits[0])).r;
	ivec3 position = ivec3(
		(packedPosition >> 20) & 0x3FF,
		(packedPosition >> 10) & 0x3FF,
		packedPosition & 0x3FF
	);

	vec3 radiance, normal;
	float count = ReadVoxelAndClear(voxelPackedData, position, radiance, normal);
	imageStore(voxelRadiance, position, vec4(radiance, 1.0));
	imageStore(voxelNormal, position, vec4(normal, count));
}